const mongoose = require('mongoose')
const Wave = require('./wave');
const User = require('./user');

const conversationSchema = mongoose.Schema({
    contacts: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Contact'
    }],
    user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },
    source: String,
    subject: String,
    readed: { type: Boolean, default: false },
    sourceIP: String,
    waves: [
        { type: mongoose.Schema.Types.ObjectId, ref: 'Wave' }
    ],
    tag: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Tag'
    },
    tags: [{
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Tag',
        null: true
    }],
    //for anonymous conversations
    ipConnect: String,
    starred: Boolean,
    archived: Boolean,
    flagged: { bool: { type: Boolean, default: false }, date: { type: Date, default: Date.now() } },
    spam: { type: Boolean, default: false },
    fwd: { type: Boolean, default: false },
    pin: { type: Date ,default: null},
    messageId:String,
    trash: { bool: { type: Boolean, default: false }, date: { type: Date, default: Date.now() } },

}).pre("remove", function (next) {

    User.findByIdAndUpdate({ _id: this.user }, { $pull: { conversations: this._id } }).then((res) => {
        console.log("res2", res);

    }).catch((err) => { console.log(err); })

    this.waves.forEach(element => {
        Wave.findByIdAndDelete({ _id: element }).then((res) => {
        }).catch((err) => { console.log(err); })
    });
    next();
})


module.exports = mongoose.model('Conversation', conversationSchema)



