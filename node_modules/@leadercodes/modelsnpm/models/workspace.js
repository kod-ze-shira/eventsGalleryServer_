const mongoose = require('mongoose')
const Project = require('./project')
const Task = require('./task')
const Card = require('./card')
const dateFormat = require("dateformat")

const colorList = ["#C967B6", "#8D18AD", "#4D2AC9", "#6A67C9", "#2B79C2", "#32AABA", "#34A38B", "#53A118", "#91A118", "#BDAA1C",
    "#C48E1A", "#C46F1A", "#C43C1A", "#BF2E63", "#C9676F",
    "#FD80E5", "#B620E0", "#6236FC", "#8580FD", "#3598F4", "#40D9ED", "#44D7B6", "#6DD41F", "#BFD41", "#F0D923",
    "#F8B520", "#F88C20", "#F84A20", "#F13B7F", "#FD808B",
    "#FCB3EE", "#CA79E0", "#8868FC", "#B6B3FC", "#67B0F5", "#6FDEED", "#6FD6C0", "#86D44A", "#C4D44A", "#F0DE54",
    "#F7C352", "#F7A452", "#F77352", "#F26B9C", "#FCB3B9"]

const workspaceSchema = mongoose.Schema({
    name: { type: String },
    productionDate: { type: String },
    description: { type: String },
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    projects: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Project' }],
    taskStatuses: [{ type: mongoose.Schema.Types.ObjectId, ref: 'TaskStatus' }],
    teams: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Team' }],
    color: { type: String },
    countProjects: { type: Number, default: 0 },
    countReadyProjects: { type: Number, default: 0 }
})

//when delte workspace to delete him projects and tasks
workspaceSchema.pre('findOneAndDelete', function (next) {
    console.log("Removing projects of workspace ", this._conditions._id);
    //code to remove RealEstateProperties reference by RealEstateProject
    //Note : Here you can use $unset to clear the refernce
    // this.model('RealEstateProperty').find({ Project : this._id }, function(err,properties){
    //find the projects
    Project.model('Project').find({ workspace: this._conditions._id }, function (err, projects) {
        console.log("projects", projects)
        if (err) {
            console.log("No projects found in this workspace", err)
        } else if (projects.length == 0) {
            console.log("No projects found in this workspace", projects.length)
        } else {
            projects.forEach(element => {
                ////delete tasks
                delete_cards_to_project(element._id).then((ans) => {
                    console.log(ans);
                    //delete project   
                    element.remove(function (delete_err, delete_data) {
                        if (delete_err) {
                            console.log("No projects found in this workspace")
                        } else {
                            console.log("project deleted");
                        }
                    })
                })
                    .catch((err) => {
                        console.log(err);
                    })
            })
        }
    })
    next()
})

//צריך לבדוק את זה אחרי שמכניסים קארד
//delete cards of project
delete_cards_to_project = (project_id) => {

    return new Promise((resolve, reject) => {
        //find tasks
        Card.model('Card').find({ project: project_id }, function (err, cards) {
            console.log("cards", cards);
            if (err) {
                console.log("No cards found in this project", err);
                reject(err);
            }
            else if (cards.length == 0) {
                console.log("No cards found in this project", cards.length);
                reject("No cards found in this project")
            }
            else {
                cards.forEach(element => {
                    delete_tasks_of_card(element._id).then((result) => {
                        console.log(result);
                        //delete project   
                        element.remove(function (delete_err, delete_data) {
                            if (delete_err) {
                                console.log("No cards found in this project");
                            } else {
                                console.log("card deleted");
                            }
                        });
                    })
                        .catch((err) => {
                            console.log(err);
                        })
                });

                resolve('cardsssssss deleted')
            }
        })

    });
}

//delete tasks to project
delete_tasks_of_card = (card_id) => {

    return new Promise((resolve, reject) => {
        //find tasks
        Task.model('Task').find({ card: card_id }, function (err, tasks) {
            console.log("tasks", tasks);
            if (err) {
                console.log("No tasks found in this card", err);
                reject(err);
            }
            else if (tasks.length == 0) {
                console.log("No tasks found in this card", tasks.length);
                reject("No tasks found in this card")
            }
            else {
                for (let i = 0; i < tasks.length; i++) {
                    //remove
                    tasks[i].remove(function (delete_task_err, delete_task) {
                        if (delete_task_err) {
                            console.log("No task found in this card", delete_task_err);
                            reject(delete_task_err)
                        } else {
                            console.log(`task deleted`);

                        }
                    })
                }
                resolve('taskssss deleted')
            }
        })

    });
}

workspaceSchema.pre('save', function (next) {
    this.productionDate = productionDate()
    console.log(this.color)
    //check if has color because save can be also after one save
    if (this.color == undefined) {
        this.color = getRandomColor();
    }
    else {
        console.log("has color to workspace");
    }
    next()
})

function productionDate() {
    let today = new Date()
    let dd = today.getDate()
    let mm = today.getMonth() + 1
    const yyyy = today.getFullYear()
    today = (dd <= 9 ? '0' + dd : dd) + '/' + (mm <= 9 ? '0' + mm : mm) + '/' + yyyy
    return (today)
}

function getRandomColor() {
    const randColor = Math.floor((Math.random() * colorList.length) + 0)
    const color = colorList[randColor]
    return color
}
module.exports = mongoose.model("Workspace", workspaceSchema)

