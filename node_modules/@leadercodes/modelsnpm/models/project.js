const mongoose = require('mongoose')
const Workspace = require('./workspace')
const Task = require('./task')
const Card = require('./card')

const colorList = ["#C967B6", "#8D18AD", "#4D2AC9", "#6A67C9", "#2B79C2", "#32AABA", "#34A38B", "#53A118", "#91A118", "#BDAA1C",
    "#C48E1A", "#C46F1A", "#C43C1A", "#BF2E63", "#C9676F",
    "#FD80E5", "#B620E0", "#6236FC", "#8580FD", "#3598F4", "#40D9ED", "#44D7B6", "#6DD41F", "#BFD41", "#F0D923",
    "#F8B520", "#F88C20", "#F84A20", "#F13B7F", "#FD808B",
    "#FCB3EE", "#CA79E0", "#8868FC", "#B6B3FC", "#67B0F5", "#6FDEED", "#6FD6C0", "#86D44A", "#C4D44A", "#F0DE54",
    "#F7C352", "#F7A452", "#F77352", "#F26B9C", "#FCB3B9"]

const projectSchema = mongoose.Schema({
    name: { type: String },
    complete: { type: Boolean, default: false },
    index: { type: Number },
    description: { type: String },
    startDate: { type: String },
    dueDate: { type: String },
    endDate: { type: String },
    updateDates: [{ type: String }],
    files: [{ type: String }],
    workspace: { type: mongoose.Schema.Types.ObjectId, ref: 'Workspace' },
    cards: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Card' }],
    teams: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Team' }],
    color: { type: String },
    countTasks: { type: Number, default: 0 },
    countReadyTasks: { type: Number, default: 0 },
    members: [{ type: mongoose.Schema.Types.ObjectId, ref: 'SharedObject' }],//renana change SharedObjects to SharedObject 
    chatId: { type: mongoose.Schema.Types.ObjectId, ref: 'Hangoutâ€Ž' },
    workingTime: [{ type: mongoose.Schema.Types.ObjectId, ref: 'hour' }],
    logs: [{ type: mongoose.Schema.Types.ObjectId, ref: "LogDetails" }]
})

projectSchema.pre('findOneAndDelete', function (next) {
    console.log("Removing project and him workspace and cards and tasks ", this)

    Card.model('Card').find({ project: this._conditions._id }, function (err, cards) {
        console.log("cards", cards);
        if (err) {
            console.log("No cards found in this project,errrrrroooorrr", err)
        } else if (cards.length == 0) {
            console.log("No cards found in this project", cards.length)
        } else {
            ////delete cards
            cards.forEach(element => {
                delete_tasks_of_card(element._id).then((ans) => {
                    element.remove(function (delete_err, delete_data) {
                        if (delete_err) {
                            console.log("No task found in this card")
                        } else {
                            console.log("task deleted")
                        }
                    })
                })
                    .catch((err) => {
                        console.log(err);
                    })
            });
        }
        return next()
    })
})

delete_tasks_of_card = (card_id) => {

    return new Promise((resolve, reject) => {
        //find tasks
        Task.model('Task').find({ card: card_id }, function (err, tasks) {
            console.log("tasks", tasks)
            if (err) {
                console.log("No tasks found in this card", err)
                reject(err)
            }
            else if (tasks.length == 0) {
                console.log("No tasks found in this card", tasks.length)
                reject("No tasks found in this card")
            }
            else {
                for (let i = 0; i < tasks.length; i++) {
                    //remove
                    tasks[i].remove(function (delete_task_err, delete_task) {
                        if (delete_task_err) {
                            console.log("No task found in this card", delete_task_err);
                            reject(delete_task_err)
                        } else {
                            console.log(`task deleted`)

                        }
                    })
                }
                resolve('taskssss deleted')
            }
        })

    });
}

projectSchema.pre('save', function (next) {
    console.log("this.updateDates.length : ", this.updateDates.length)
    console.log(this.color)
    this.startDate = startDate()
    if (this.dueDate == undefined)
        this.dueDate = dueDate()
    if (this.updateDates.length == 0) {
        this.updateDates.push(startDate())
        console.log("* this.updateDates : ", this.updateDates)
    }
    //check if has color because save can be also after one save
    if (this.color == undefined) {
        this.color = getRandomColor()
    }
    else {
        console.log("has color to project")
    }
    next()
})

function startDate() {
    let today = new Date()
    let dd = today.getDate()
    let mm = today.getMonth() + 1
    const yyyy = today.getFullYear()
    today = (dd <= 9 ? '0' + dd : dd) + '/' + (mm <= 9 ? '0' + mm : mm) + '/' + yyyy
    return (today)
}

function dueDate() {
    let date = new Date()
    date.setMonth(date.getMonth() + 3)
    console.log("date : ", date)
    let month = date.getMonth() + 1
    let day = date.getDate()
    let year = date.getFullYear()
    const finalDate = (day <= 9 ? '0' + day : day) + '/' + (month <= 9 ? '0' + month : month) + '/' + year
    console.log("finalDate : ", finalDate)
    return (finalDate)
}

function getRandomColor() {
    const randColor = Math.floor((Math.random() * colorList.length) + 0)
    const color = colorList[randColor]
    return color;
}

module.exports = mongoose.model("Project", projectSchema)

