const mongoose = require("mongoose");
const userSchema = mongoose.Schema({
  email: {
    type: String,
    require: true,
    unique: true,
    match: /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
  },
  uid: { type: String, require: true },
  username: { type: String },
  premium: { type: Boolean },
  contacts: [{ type: mongoose.Schema.Types.ObjectId, ref: "Contact" }],//renana change ref to Contact with s`
  conversations: [
    { type: mongoose.Schema.Types.ObjectId, ref: "Conversation" },
  ],
  notification: [{
    token: { type: String },
    joiningDate: { type: Date },
  }],
  videos: [{ type: mongoose.Schema.Types.ObjectId, ref: "Video" }],
  tags: [{ type: mongoose.Schema.Types.ObjectId, ref: "Tag" }],
  landingPages: [{ type: mongoose.Schema.Types.ObjectId, ref: "LandingPage" }],
  forms: [{ type: mongoose.Schema.Types.ObjectId, ref: "Form" }],
  cards: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Card",
    },
  ],
  events: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Event",
    },
  ],
  blog: { type: mongoose.Schema.Types.ObjectId, ref: "Blog" },
  chats: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Chat",
    },
  ],
  signatures: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Signature' }],
  groups: {
    type: [{
      groupName: { type: String },
      members: [{ type: String}]
    }], default: []
  },
  drafts: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Draft'
  }],
  spamContactID: [{ type: mongoose.Schema.Types.ObjectId }],
  notes: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Notes' }],
  copiesContents: [{ type: mongoose.Schema.Types.ObjectId, ref: 'CopyContent' }],
  //Racheli Mayevesky - Extension
  tabsHistory: [
    {
       date: { type: Date },
       tabs: [{ type: mongoose.Schema.Types.ObjectId, ref: 'TabHistory' }]
    }
 ],
   userType: { type: String }, //manager or subUser
  userManager: { type: String }, // userName of the manager

  sites: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Site",
    },
  ],
  suspend: { type: Boolean, default: false },
  fullName: { type: String, default: "" },
  position: { type: String, default: "" },
  phone: {
    type: String,
    default: "",
    validate: {
      validator: function (v) {
        return /^$|^\d{10}$/.test(v);
      },
      message: (props) => `${props.value} is not a valid phone number!`,
    },
  },
  companyName: { type: String, default: "" },
  birthday: { type: String },
  socialmedias: {
    facebook: { type: String, default: "" },
    whatsapp: { type: String, default: "" },
    messenger: { type: String, default: "" },
    youtube: { type: String, default: "" },
    website: { type: String, default: "" },
  },
  address: { type: String, default: "" },
  numberAddress: { type: Number, default: 0 },
  city: { type: String, default: "" },
  state: { type: String, default: "" }, ///
  zipcode: { type: String, default: "" }, ///
  vat: { type: String, default: "" },
  imgProfile: { type: String, default: "" },
  imgLogo: { type: String, default: "" },
  stringBase: { type: String, default: "" },
  country: { type: String, default: "" },
  workHours: { type: Number, default: 0 },
  companyEmail: {
    type: String,
    default: "",
    match: /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
  },
  apiKey: { type: String },
  contactFacebookForm: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "ContactFacebookForms",
  },
  // googleContacts:[{type: mongoose.Schema.Types.ObjectId ,ref:'ContactGoogle'}], chedva neuman
  customers: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Customer",
    },
  ],


  team: [{ type: mongoose.Schema.Types.ObjectId, ref: "Team" }],
  organizations: [
    { type: mongoose.Schema.Types.ObjectId, ref: "Organization" },
  ],
  sharedObjects: [
    {
      schemaName: { type: String },
      objectId: { type: String },
    },
  ],
  tasksNotBelongs: [{ type: mongoose.Schema.Types.ObjectId, ref: "Task" }],//renana change Task1 to Task1

  tickets: [{ type: mongoose.Schema.Types.ObjectId, ref: "Ticket" }],
  departments: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Departments",
    },
  ],
  helpCategorys: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "helpCategory",
    },
  ],
  helpArticles: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Article",
    },
  ],
  questions: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Question",
    },
  ],
  answers: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Answer",
    },
  ],
  helpProfile: { type: String, default: "" },
  taskStatuses: [{ type: mongoose.Schema.Types.ObjectId, ref: "TaskStatus" }],
  calendarSettings: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "CalendarSettings",
  },
  firstName: {
    type: String,
  },
  lastName: {
    type: String,
  },
  instagram: {
    type: String,
  },
  linkedin: {
    type: String,
  },
  twitter: {
    type: String,
  },
  googleId: {
    type: String,
  },
  linkedinId: {
    type: String,
  },
  phone: {
    type: String,
    match: /\d{10}/,
  },
  favorites: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Business",
    },
  ],
  paidUp: {
    type: String,
    default: "free",
  },
  business: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Business",
    },
  ],
  profileImg: [{ type: String }],
  pipelines: [{ type: String }],
  email: {
    type: String,
    unique: true,
  },
  password: {
    type: String,
  },
  desktopFcmToken: {
    type: String,
  },
  iosFcmToken: {
    type: String,
  },
  androidFcmToken: {
    type: String,
  },
  fcmToken: {
    type: String,
  },
  systemWaves: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: "SystemWave",
    },
  ],
      calendarSettings: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'CalendarSettings'
    },
    eventsPageSettings: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'EventsPageSettings'
    },
    //chedva neuman
     googleTokens: [{
    name:{ type: String},
    googleToken: { type: String },
    enable: { type: Boolean, default: true }
}],
  funnels: [{ type: mongoose.Schema.Types.ObjectId, ref: "Funnels" }],
  mailTemplates: [{ type: mongoose.Schema.Types.ObjectId, ref: "MailTemplate" }],
  workspaces: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Workspace' }],
  organizations: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Organization' }],
  tasksNotBelongs: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Task' }],
  taskStatuses: [{ type: mongoose.Schema.Types.ObjectId, ref: 'TaskStatus' }],
  editorSeats: [{
    user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    count: { type: Number, default: 0 }
  }],
  sharedObjects: [{ type: mongoose.Schema.Types.ObjectId, ref: 'SharedObjects' }],
  hours: [{
    type: mongoose.Schema.Types.ObjectId, ref: 'Hour'
  }],
  //Adina Schustal - webhooks
  webhooks: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Webhook' }],
  //Moriya Nadav - papers
  papersNumberOfPages: {
    type: String,
  },
  quotes: [
    { type: mongoose.Schema.Types.ObjectId, ref: 'Quote' }
  ],
  //Rivka Fogelman- Box
  mailChannels: []

});
module.exports = mongoose.model("User", userSchema);
