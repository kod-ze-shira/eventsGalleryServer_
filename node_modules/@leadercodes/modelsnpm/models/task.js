const mongoose = require('mongoose')
const TaskStatus = require('./taskStatus')
const Priorty = require('./priority')
const Card = require('./card')

const priority = [{ priorityLevel: "high", color: "red" }, { priorityLevel: "medium", color: "blue" }, { priorityLevel: "low", color: "green" }]


const taskSchema = mongoose.Schema({
    name: { type: String },
    complete: { type: Boolean, default: false },
    index: { type: Number },
    description: { type: String },
    milestones: { type: Boolean, default: 0 },
    // assingTo: [{
    //     user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    //     contact: { type: mongoose.Schema.Types.ObjectId, ref: 'Contact' },
    // }],
    assingTo: {
        user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
        contact: { type: mongoose.Schema.Types.ObjectId, ref: 'Contact' },
    },
    status: { type: mongoose.Types.ObjectId, ref: 'TaskStatus' },
    startDate: { type: String },
    dueDate: { type: String },
    endDate: { type: String },
    updateDates: { type: String },
    files: [{
        name: { type: String },
        url: { type: String },
        size: { type: String }
    }],
    card: { type: mongoose.Schema.Types.ObjectId, ref: 'Card' },
    user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    likes: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
    workingTime: [{ type: mongoose.Schema.Types.ObjectId, ref: 'hour' }],
    priority: { type: mongoose.Schema.Types.ObjectId, ref: 'Priority' }
})

taskSchema.pre('findOneAndDelete', async function (next) {
    try {
        console.log('pre findOneAndDelete task')
        console.log("this : ", this)
        const docToUpdate = await this.model.findOne(this.getQuery())
        console.log("docToUpdate : ", docToUpdate)
        console.log("docToUpdate.card : ", docToUpdate.card)
        // await sortTheIndexes(docToUpdate.card)
        return next()
    } catch (error) {
        console.log('error')
    }
}
)

taskSchema.pre('save', async function (next) {
    console.log(this.color)
    if (this.startDate == undefined)
        this.startDate = startDate()
    if (this.dueDate == undefined)
        this.dueDate = dueDate()
    next()
})

function startDate() {
    let today = new Date()
    let dd = today.getDate()
    let mm = today.getMonth() + 1
    const yyyy = today.getFullYear()
    today = (dd <= 9 ? '0' + dd : dd) + '/' + (mm <= 9 ? '0' + mm : mm) + '/' + yyyy
    return (today)
}

function dueDate() {
    let date = new Date()
    date.setDate(date.getDate() + 7)
    console.log("date : ", date)
    let month = date.getMonth() + 1
    let day = date.getDate()
    let year = date.getFullYear()
    const finalDate = (day <= 9 ? '0' + day : day) + '/' + (month <= 9 ? '0' + month : month) + '/' + year
    console.log("finalDate : ", finalDate)
    return (finalDate)
}

module.exports = mongoose.model("Task", taskSchema)

